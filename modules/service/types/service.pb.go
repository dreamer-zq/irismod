// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: irismod/service/service.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RequestContextBatchState is a type alias that represents a request batch
// status as a byte
type RequestContextBatchState int32

const (
	// BATCH_RUNNING defines the running batch status.
	BATCHRUNNING RequestContextBatchState = 0
	// BATCH_COMPLETED defines the completed batch status.
	BATCHCOMPLETED RequestContextBatchState = 1
)

var RequestContextBatchState_name = map[int32]string{
	0: "BATCH_RUNNING",
	1: "BATCH_COMPLETED",
}

var RequestContextBatchState_value = map[string]int32{
	"BATCH_RUNNING":   0,
	"BATCH_COMPLETED": 1,
}

func (RequestContextBatchState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{0}
}

// RequestContextState is a type alias that represents a request status as a
// byte
type RequestContextState int32

const (
	// RUNNING defines the running request context status
	RUNNING RequestContextState = 0
	// PAUSED defines the paused request context status
	PAUSED RequestContextState = 1
	// COMPLETED defines the completed request context status
	COMPLETED RequestContextState = 2
)

var RequestContextState_name = map[int32]string{
	0: "RUNNING",
	1: "PAUSED",
	2: "COMPLETED",
}

var RequestContextState_value = map[string]int32{
	"RUNNING":   0,
	"PAUSED":    1,
	"COMPLETED": 2,
}

func (RequestContextState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{1}
}

// ServiceDefinition defines a standard for service definition
type ServiceDefinition struct {
	Name              string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description       string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Tags              []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Author            string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	AuthorDescription string   `protobuf:"bytes,5,opt,name=author_description,json=authorDescription,proto3" json:"author_description,omitempty"`
	Schemas           string   `protobuf:"bytes,6,opt,name=schemas,proto3" json:"schemas,omitempty"`
}

func (m *ServiceDefinition) Reset()         { *m = ServiceDefinition{} }
func (m *ServiceDefinition) String() string { return proto.CompactTextString(m) }
func (*ServiceDefinition) ProtoMessage()    {}
func (*ServiceDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{0}
}
func (m *ServiceDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceDefinition.Merge(m, src)
}
func (m *ServiceDefinition) XXX_Size() int {
	return m.Size()
}
func (m *ServiceDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceDefinition proto.InternalMessageInfo

// ServiceBinding defines a standard for service binding
type ServiceBinding struct {
	ServiceName  string                                   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Provider     string                                   `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Deposit      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=deposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"deposit"`
	Pricing      string                                   `protobuf:"bytes,4,opt,name=pricing,proto3" json:"pricing,omitempty"`
	QoS          uint64                                   `protobuf:"varint,5,opt,name=qos,proto3" json:"qos,omitempty"`
	Options      string                                   `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	Available    bool                                     `protobuf:"varint,7,opt,name=available,proto3" json:"available,omitempty"`
	DisabledTime time.Time                                `protobuf:"bytes,8,opt,name=disabled_time,json=disabledTime,proto3,stdtime" json:"disabled_time"`
	Owner        string                                   `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *ServiceBinding) Reset()         { *m = ServiceBinding{} }
func (m *ServiceBinding) String() string { return proto.CompactTextString(m) }
func (*ServiceBinding) ProtoMessage()    {}
func (*ServiceBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{1}
}
func (m *ServiceBinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceBinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceBinding.Merge(m, src)
}
func (m *ServiceBinding) XXX_Size() int {
	return m.Size()
}
func (m *ServiceBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceBinding.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceBinding proto.InternalMessageInfo

// RequestContext defines a standard for request context
type RequestContext struct {
	ServiceName            string                                   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Providers              []string                                 `protobuf:"bytes,2,rep,name=providers,proto3" json:"providers,omitempty"`
	Consumer               string                                   `protobuf:"bytes,3,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Input                  string                                   `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	ServiceFeeCap          github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=service_fee_cap,json=serviceFeeCap,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"service_fee_cap"`
	ModuleName             string                                   `protobuf:"bytes,6,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	Timeout                int64                                    `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Repeated               bool                                     `protobuf:"varint,8,opt,name=repeated,proto3" json:"repeated,omitempty"`
	RepeatedFrequency      uint64                                   `protobuf:"varint,9,opt,name=repeated_frequency,json=repeatedFrequency,proto3" json:"repeated_frequency,omitempty"`
	RepeatedTotal          int64                                    `protobuf:"varint,10,opt,name=repeated_total,json=repeatedTotal,proto3" json:"repeated_total,omitempty"`
	BatchCounter           uint64                                   `protobuf:"varint,11,opt,name=batch_counter,json=batchCounter,proto3" json:"batch_counter,omitempty"`
	BatchRequestCount      uint32                                   `protobuf:"varint,12,opt,name=batch_request_count,json=batchRequestCount,proto3" json:"batch_request_count,omitempty"`
	BatchResponseCount     uint32                                   `protobuf:"varint,13,opt,name=batch_response_count,json=batchResponseCount,proto3" json:"batch_response_count,omitempty"`
	BatchResponseThreshold uint32                                   `protobuf:"varint,14,opt,name=batch_response_threshold,json=batchResponseThreshold,proto3" json:"batch_response_threshold,omitempty"`
	ResponseThreshold      uint32                                   `protobuf:"varint,15,opt,name=response_threshold,json=responseThreshold,proto3" json:"response_threshold,omitempty"`
	BatchState             RequestContextBatchState                 `protobuf:"varint,16,opt,name=batch_state,json=batchState,proto3,enum=irismod.service.RequestContextBatchState" json:"batch_state,omitempty"`
	State                  RequestContextState                      `protobuf:"varint,17,opt,name=state,proto3,enum=irismod.service.RequestContextState" json:"state,omitempty"`
}

func (m *RequestContext) Reset()         { *m = RequestContext{} }
func (m *RequestContext) String() string { return proto.CompactTextString(m) }
func (*RequestContext) ProtoMessage()    {}
func (*RequestContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{2}
}
func (m *RequestContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestContext.Merge(m, src)
}
func (m *RequestContext) XXX_Size() int {
	return m.Size()
}
func (m *RequestContext) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestContext.DiscardUnknown(m)
}

var xxx_messageInfo_RequestContext proto.InternalMessageInfo

// Request defines a standard for request
type Request struct {
	Id                         string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceName                string                                   `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Provider                   string                                   `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Consumer                   string                                   `protobuf:"bytes,4,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Input                      string                                   `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ServiceFee                 github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=service_fee,json=serviceFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"service_fee"`
	RequestHeight              int64                                    `protobuf:"varint,7,opt,name=request_height,json=requestHeight,proto3" json:"request_height,omitempty"`
	ExpirationHeight           int64                                    `protobuf:"varint,8,opt,name=expiration_height,json=expirationHeight,proto3" json:"expiration_height,omitempty"`
	RequestContextId           string                                   `protobuf:"bytes,9,opt,name=request_context_id,json=requestContextId,proto3" json:"request_context_id,omitempty"`
	RequestContextBatchCounter uint64                                   `protobuf:"varint,10,opt,name=request_context_batch_counter,json=requestContextBatchCounter,proto3" json:"request_context_batch_counter,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{3}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

// CompactRequest defines a standard for compact request
type CompactRequest struct {
	RequestContextId           string                                   `protobuf:"bytes,1,opt,name=request_context_id,json=requestContextId,proto3" json:"request_context_id,omitempty"`
	RequestContextBatchCounter uint64                                   `protobuf:"varint,2,opt,name=request_context_batch_counter,json=requestContextBatchCounter,proto3" json:"request_context_batch_counter,omitempty"`
	Provider                   string                                   `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	ServiceFee                 github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=service_fee,json=serviceFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"service_fee"`
	RequestHeight              int64                                    `protobuf:"varint,5,opt,name=request_height,json=requestHeight,proto3" json:"request_height,omitempty"`
	ExpirationHeight           int64                                    `protobuf:"varint,6,opt,name=expiration_height,json=expirationHeight,proto3" json:"expiration_height,omitempty"`
}

func (m *CompactRequest) Reset()         { *m = CompactRequest{} }
func (m *CompactRequest) String() string { return proto.CompactTextString(m) }
func (*CompactRequest) ProtoMessage()    {}
func (*CompactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{4}
}
func (m *CompactRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactRequest.Merge(m, src)
}
func (m *CompactRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompactRequest proto.InternalMessageInfo

// Response defines a standard for response
type Response struct {
	Provider                   string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Consumer                   string `protobuf:"bytes,2,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Result                     string `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Output                     string `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	RequestContextId           string `protobuf:"bytes,5,opt,name=request_context_id,json=requestContextId,proto3" json:"request_context_id,omitempty"`
	RequestContextBatchCounter uint64 `protobuf:"varint,6,opt,name=request_context_batch_counter,json=requestContextBatchCounter,proto3" json:"request_context_batch_counter,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{5}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

// Pricing defines a standard for service pricing
type Pricing struct {
	Price              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
	PromotionsByTime   []PromotionByTime                        `protobuf:"bytes,2,rep,name=promotions_by_time,json=promotionsByTime,proto3" json:"promotions_by_time"`
	PromotionsByVolume []PromotionByVolume                      `protobuf:"bytes,3,rep,name=promotions_by_volume,json=promotionsByVolume,proto3" json:"promotions_by_volume"`
}

func (m *Pricing) Reset()         { *m = Pricing{} }
func (m *Pricing) String() string { return proto.CompactTextString(m) }
func (*Pricing) ProtoMessage()    {}
func (*Pricing) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{6}
}
func (m *Pricing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pricing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pricing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pricing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pricing.Merge(m, src)
}
func (m *Pricing) XXX_Size() int {
	return m.Size()
}
func (m *Pricing) XXX_DiscardUnknown() {
	xxx_messageInfo_Pricing.DiscardUnknown(m)
}

var xxx_messageInfo_Pricing proto.InternalMessageInfo

// PromotionByTime defines a standard for service promotion by time
type PromotionByTime struct {
	StartTime time.Time                              `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime   time.Time                              `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	Discount  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=discount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"discount"`
}

func (m *PromotionByTime) Reset()         { *m = PromotionByTime{} }
func (m *PromotionByTime) String() string { return proto.CompactTextString(m) }
func (*PromotionByTime) ProtoMessage()    {}
func (*PromotionByTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{7}
}
func (m *PromotionByTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionByTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionByTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionByTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionByTime.Merge(m, src)
}
func (m *PromotionByTime) XXX_Size() int {
	return m.Size()
}
func (m *PromotionByTime) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionByTime.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionByTime proto.InternalMessageInfo

// PromotionByVolume defines a standard for service promotion by volume
type PromotionByVolume struct {
	Volume   uint64                                 `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	Discount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=discount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"discount"`
}

func (m *PromotionByVolume) Reset()         { *m = PromotionByVolume{} }
func (m *PromotionByVolume) String() string { return proto.CompactTextString(m) }
func (*PromotionByVolume) ProtoMessage()    {}
func (*PromotionByVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{8}
}
func (m *PromotionByVolume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionByVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionByVolume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionByVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionByVolume.Merge(m, src)
}
func (m *PromotionByVolume) XXX_Size() int {
	return m.Size()
}
func (m *PromotionByVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionByVolume.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionByVolume proto.InternalMessageInfo

// Params defines service module's parameters
type Params struct {
	MaxRequestTimeout         int64                                    `protobuf:"varint,1,opt,name=max_request_timeout,json=maxRequestTimeout,proto3" json:"max_request_timeout,omitempty"`
	MinDepositMultiple        int64                                    `protobuf:"varint,2,opt,name=min_deposit_multiple,json=minDepositMultiple,proto3" json:"min_deposit_multiple,omitempty"`
	MinDeposit                github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=min_deposit,json=minDeposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_deposit"`
	ServiceFeeTax             github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,4,opt,name=service_fee_tax,json=serviceFeeTax,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"service_fee_tax"`
	SlashFraction             github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,5,opt,name=slash_fraction,json=slashFraction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction"`
	ComplaintRetrospect       time.Duration                            `protobuf:"bytes,6,opt,name=complaint_retrospect,json=complaintRetrospect,proto3,stdduration" json:"complaint_retrospect"`
	ArbitrationTimeLimit      time.Duration                            `protobuf:"bytes,7,opt,name=arbitration_time_limit,json=arbitrationTimeLimit,proto3,stdduration" json:"arbitration_time_limit"`
	TxSizeLimit               uint64                                   `protobuf:"varint,8,opt,name=tx_size_limit,json=txSizeLimit,proto3" json:"tx_size_limit,omitempty"`
	BaseDenom                 string                                   `protobuf:"bytes,9,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	RestrictedServiceFeeDenom bool                                     `protobuf:"varint,10,opt,name=restricted_service_fee_denom,json=restrictedServiceFeeDenom,proto3" json:"restricted_service_fee_denom,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_93cffe4587f4eac8, []int{9}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("irismod.service.RequestContextBatchState", RequestContextBatchState_name, RequestContextBatchState_value)
	proto.RegisterEnum("irismod.service.RequestContextState", RequestContextState_name, RequestContextState_value)
	proto.RegisterType((*ServiceDefinition)(nil), "irismod.service.ServiceDefinition")
	proto.RegisterType((*ServiceBinding)(nil), "irismod.service.ServiceBinding")
	proto.RegisterType((*RequestContext)(nil), "irismod.service.RequestContext")
	proto.RegisterType((*Request)(nil), "irismod.service.Request")
	proto.RegisterType((*CompactRequest)(nil), "irismod.service.CompactRequest")
	proto.RegisterType((*Response)(nil), "irismod.service.Response")
	proto.RegisterType((*Pricing)(nil), "irismod.service.Pricing")
	proto.RegisterType((*PromotionByTime)(nil), "irismod.service.PromotionByTime")
	proto.RegisterType((*PromotionByVolume)(nil), "irismod.service.PromotionByVolume")
	proto.RegisterType((*Params)(nil), "irismod.service.Params")
}

func init() { proto.RegisterFile("irismod/service/service.proto", fileDescriptor_93cffe4587f4eac8) }

var fileDescriptor_93cffe4587f4eac8 = []byte{
	// 1539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4b, 0x73, 0x13, 0xcb,
	0x15, 0xd6, 0x48, 0xd6, 0xc3, 0x47, 0x96, 0x6c, 0x35, 0x2e, 0xd7, 0xa0, 0x02, 0x49, 0x51, 0x5e,
	0x0e, 0x09, 0x12, 0x90, 0x4d, 0x8a, 0x0d, 0x85, 0x64, 0x1c, 0xa0, 0xc0, 0x71, 0xc6, 0x82, 0xaa,
	0xb0, 0x99, 0x1a, 0xcd, 0xb4, 0xa5, 0xae, 0x68, 0xa6, 0x87, 0xe9, 0x96, 0x91, 0x59, 0x67, 0x91,
	0xf2, 0x8a, 0x25, 0x1b, 0xa7, 0xa8, 0x0a, 0x8b, 0x54, 0x56, 0xf9, 0x03, 0xc9, 0xda, 0x4b, 0x96,
	0xa9, 0x2c, 0x20, 0xb1, 0x37, 0xf9, 0x19, 0xb7, 0xfa, 0x31, 0x7a, 0x19, 0x1b, 0xc3, 0x85, 0xbb,
	0xf2, 0x9c, 0xd7, 0xd7, 0xdd, 0xe7, 0x3b, 0xa7, 0xfb, 0xc8, 0x70, 0x95, 0x44, 0x84, 0xf9, 0xd4,
	0x6b, 0x32, 0x1c, 0xed, 0x11, 0x17, 0xc7, 0x7f, 0x1b, 0x61, 0x44, 0x39, 0x45, 0xcb, 0xda, 0xdc,
	0xd0, 0xea, 0x72, 0xc5, 0xa5, 0xcc, 0xa7, 0xac, 0xd9, 0x75, 0x18, 0x6e, 0xee, 0xdd, 0xec, 0x62,
	0xee, 0xdc, 0x6c, 0xba, 0x94, 0x04, 0x2a, 0xa0, 0xbc, 0xda, 0xa3, 0x3d, 0x2a, 0x3f, 0x9b, 0xe2,
	0x4b, 0x6b, 0x2b, 0x3d, 0x4a, 0x7b, 0x03, 0xdc, 0x94, 0x52, 0x77, 0xb8, 0xdb, 0xf4, 0x86, 0x91,
	0xc3, 0x09, 0x8d, 0xa3, 0xaa, 0xf3, 0x76, 0x4e, 0x7c, 0xcc, 0xb8, 0xe3, 0x87, 0xca, 0xa1, 0xfe,
	0x2f, 0x03, 0x4a, 0x3b, 0x6a, 0x0b, 0x1b, 0x78, 0x97, 0x04, 0x44, 0x04, 0x23, 0x04, 0x0b, 0x81,
	0xe3, 0x63, 0xd3, 0xa8, 0x19, 0xeb, 0x8b, 0x96, 0xfc, 0x46, 0x35, 0xc8, 0x7b, 0x98, 0xb9, 0x11,
	0x09, 0x85, 0x8b, 0x99, 0x94, 0xa6, 0x69, 0x95, 0x88, 0xe2, 0x4e, 0x8f, 0x99, 0xa9, 0x5a, 0x4a,
	0x44, 0x89, 0x6f, 0xb4, 0x06, 0x19, 0x67, 0xc8, 0xfb, 0x34, 0x32, 0x17, 0x64, 0x80, 0x96, 0xd0,
	0x75, 0x40, 0xea, 0xcb, 0x9e, 0x06, 0x4d, 0x4b, 0x9f, 0x92, 0xb2, 0x6c, 0x4c, 0x41, 0x9b, 0x90,
	0x65, 0x6e, 0x1f, 0xfb, 0x0e, 0x33, 0x33, 0xd2, 0x27, 0x16, 0xeb, 0x7f, 0x4a, 0x41, 0x51, 0x1f,
	0xa0, 0x45, 0x02, 0x8f, 0x04, 0x3d, 0xf4, 0x23, 0x58, 0xd2, 0x59, 0xb5, 0xa7, 0x4e, 0x91, 0xd7,
	0xba, 0x2d, 0x71, 0x98, 0x32, 0xe4, 0xc2, 0x88, 0xee, 0x11, 0x0f, 0x47, 0xfa, 0x24, 0x63, 0x19,
	0x61, 0xc8, 0x7a, 0x38, 0xa4, 0x8c, 0x70, 0x79, 0x92, 0xfc, 0xad, 0xcb, 0x0d, 0xc5, 0x4d, 0x43,
	0x70, 0xd3, 0xd0, 0xdc, 0x34, 0xda, 0x94, 0x04, 0xad, 0x1b, 0x47, 0xef, 0xab, 0x89, 0xbf, 0x7f,
	0xa8, 0xae, 0xf7, 0x08, 0xef, 0x0f, 0xbb, 0x0d, 0x97, 0xfa, 0x4d, 0x4d, 0xa4, 0xfa, 0x73, 0x9d,
	0x79, 0x7f, 0x6c, 0xf2, 0xfd, 0x10, 0x33, 0x19, 0xc0, 0xac, 0x18, 0x5b, 0x1c, 0x29, 0x8c, 0x88,
	0x4b, 0x82, 0x9e, 0x4e, 0x4d, 0x2c, 0xa2, 0xcb, 0x90, 0x7a, 0x4e, 0x99, 0x4c, 0xc6, 0x42, 0x2b,
	0x7b, 0xfc, 0xbe, 0x9a, 0xfa, 0x3d, 0xdd, 0xb1, 0x84, 0x4e, 0x04, 0x51, 0x99, 0x91, 0x71, 0x1e,
	0xb4, 0x88, 0xae, 0xc0, 0xa2, 0xb3, 0xe7, 0x90, 0x81, 0xd3, 0x1d, 0x60, 0x33, 0x5b, 0x33, 0xd6,
	0x73, 0xd6, 0x44, 0x81, 0x1e, 0x40, 0xc1, 0x23, 0x4c, 0x7c, 0x7a, 0xb6, 0x28, 0x01, 0x33, 0x57,
	0x33, 0xd6, 0xf3, 0xb7, 0xca, 0x0d, 0x55, 0x1f, 0x8d, 0xb8, 0x3e, 0x1a, 0x9d, 0xb8, 0x3e, 0x5a,
	0x39, 0x71, 0xb4, 0x57, 0x1f, 0xaa, 0x86, 0xb5, 0x14, 0x87, 0x0a, 0x23, 0x5a, 0x85, 0x34, 0x7d,
	0x11, 0xe0, 0xc8, 0x5c, 0x94, 0x1b, 0x50, 0x42, 0xfd, 0x30, 0x03, 0x45, 0x0b, 0x3f, 0x1f, 0x62,
	0xc6, 0xdb, 0x34, 0xe0, 0x78, 0xc4, 0x2f, 0x42, 0xc3, 0x15, 0x58, 0x8c, 0xd3, 0xce, 0xcc, 0xa4,
	0x2c, 0x9b, 0x89, 0x42, 0x90, 0xe4, 0xd2, 0x80, 0x0d, 0x7d, 0x1c, 0x99, 0x29, 0x45, 0x52, 0x2c,
	0x8b, 0x5d, 0x90, 0x20, 0x1c, 0x72, 0x9d, 0x3b, 0x25, 0x20, 0x06, 0xcb, 0xf1, 0x92, 0xbb, 0x18,
	0xdb, 0xae, 0x13, 0x9a, 0xe9, 0xaf, 0x4f, 0x61, 0x41, 0xaf, 0xb1, 0x89, 0x71, 0xdb, 0x09, 0x51,
	0x15, 0xf2, 0x3e, 0xf5, 0x86, 0x03, 0x7d, 0x4c, 0xc5, 0x0b, 0x28, 0x95, 0x3c, 0xa5, 0x09, 0x59,
	0x91, 0x73, 0x3a, 0xe4, 0x92, 0x98, 0x94, 0x15, 0x8b, 0xe2, 0x84, 0x11, 0x0e, 0xb1, 0xc3, 0xb1,
	0x27, 0x19, 0xc9, 0x59, 0x63, 0x59, 0x74, 0x48, 0xfc, 0x6d, 0xef, 0x46, 0x22, 0xb5, 0x81, 0xbb,
	0x2f, 0x93, 0xbe, 0x60, 0x95, 0x62, 0xcb, 0x66, 0x6c, 0x40, 0x3f, 0x85, 0xe2, 0xd8, 0x9d, 0x53,
	0xee, 0x0c, 0x4c, 0x90, 0x6b, 0x15, 0x62, 0x6d, 0x47, 0x28, 0xd1, 0x8f, 0xa1, 0xd0, 0x75, 0xb8,
	0xdb, 0xb7, 0x5d, 0x3a, 0x0c, 0x38, 0x8e, 0xcc, 0xbc, 0x04, 0x5c, 0x92, 0xca, 0xb6, 0xd2, 0xa1,
	0x06, 0x5c, 0x52, 0x4e, 0x91, 0x62, 0x54, 0x39, 0x9b, 0x4b, 0x35, 0x63, 0xbd, 0x60, 0x95, 0xa4,
	0x69, 0xcc, 0xf5, 0x30, 0xe0, 0xe8, 0x06, 0xac, 0xc6, 0xfe, 0x2c, 0xa4, 0x01, 0xc3, 0x3a, 0xa0,
	0x20, 0x03, 0x90, 0x0e, 0x50, 0x26, 0x15, 0xf1, 0x1b, 0x30, 0xe7, 0x22, 0x78, 0x3f, 0xc2, 0xac,
	0x4f, 0x07, 0x9e, 0x59, 0x94, 0x51, 0x6b, 0x33, 0x51, 0x9d, 0xd8, 0xaa, 0xd2, 0x72, 0x2a, 0x66,
	0x59, 0x6d, 0x2d, 0x3a, 0xe5, 0xfe, 0x10, 0xf2, 0x6a, 0x21, 0xc6, 0x1d, 0x8e, 0xcd, 0x95, 0x9a,
	0xb1, 0x5e, 0xbc, 0xf5, 0x8b, 0xc6, 0xdc, 0xed, 0xdb, 0x98, 0x2d, 0xdd, 0x96, 0x88, 0xd8, 0x11,
	0x01, 0x16, 0x74, 0xc7, 0xdf, 0xe8, 0x36, 0xa4, 0x15, 0x4a, 0x49, 0xa2, 0xfc, 0xe4, 0x13, 0x28,
	0x0a, 0x40, 0x85, 0xd4, 0xff, 0x99, 0x82, 0xac, 0x36, 0xa3, 0x22, 0x24, 0x89, 0xa7, 0xdb, 0x21,
	0x49, 0xbc, 0x53, 0x8d, 0x92, 0x3c, 0xff, 0xbe, 0x4a, 0xcd, 0xdd, 0x57, 0xd3, 0x6d, 0xb2, 0x70,
	0x56, 0x9b, 0xa4, 0xa7, 0xdb, 0x64, 0x00, 0xf9, 0xa9, 0x36, 0x31, 0x33, 0x5f, 0xbf, 0x45, 0x60,
	0xd2, 0x22, 0xaa, 0x32, 0x55, 0x1d, 0xf5, 0x31, 0xe9, 0xf5, 0xe3, 0x2e, 0x28, 0x68, 0xed, 0x7d,
	0xa9, 0x44, 0xbf, 0x84, 0x12, 0x1e, 0x85, 0x44, 0x3d, 0x5f, 0xb1, 0x67, 0x4e, 0x7a, 0xae, 0x4c,
	0x0c, 0xda, 0xf9, 0x57, 0xa2, 0x0a, 0xe2, 0xda, 0x94, 0xd9, 0xb6, 0x89, 0xa7, 0x6f, 0xa4, 0x95,
	0x68, 0x86, 0x86, 0x07, 0x1e, 0xba, 0x0b, 0x57, 0xe7, 0xbd, 0x67, 0x9b, 0x00, 0x64, 0x13, 0x94,
	0xa3, 0xd3, 0x55, 0xa0, 0x5b, 0xa2, 0xfe, 0x21, 0x09, 0xc5, 0x36, 0xf5, 0x43, 0xc7, 0xe5, 0x31,
	0x8d, 0x1f, 0xdf, 0x83, 0xf1, 0xa5, 0x7b, 0x48, 0x7e, 0x6a, 0x0f, 0xe7, 0x16, 0xc1, 0x1c, 0xa5,
	0x0b, 0x3f, 0x34, 0xa5, 0xe9, 0x0b, 0x53, 0x9a, 0xf9, 0x38, 0xa5, 0xf5, 0x13, 0x03, 0x72, 0x71,
	0xbb, 0xcf, 0x1c, 0xd5, 0x38, 0xa7, 0xde, 0x93, 0x73, 0xf5, 0xbe, 0x06, 0x99, 0x08, 0xb3, 0xe1,
	0x80, 0xeb, 0x04, 0x69, 0x49, 0xe8, 0xe9, 0x90, 0x4f, 0xde, 0x0b, 0x2d, 0x9d, 0xc1, 0x61, 0xfa,
	0x4b, 0x39, 0xcc, 0x7c, 0xb2, 0x8e, 0xfe, 0x92, 0x84, 0xec, 0xb6, 0x7e, 0xe7, 0x1d, 0x48, 0x8b,
	0x27, 0xff, 0x9b, 0x34, 0xa0, 0x42, 0x46, 0x1d, 0x40, 0x61, 0x44, 0x7d, 0x2a, 0x67, 0x04, 0xbb,
	0xbb, 0xaf, 0x1e, 0xff, 0xa4, 0x5c, 0xaf, 0x76, 0xea, 0xfe, 0xda, 0x8e, 0x5d, 0x5b, 0xfb, 0xe2,
	0xa9, 0x6f, 0x2d, 0x88, 0x65, 0xad, 0x95, 0x09, 0x82, 0xd2, 0xa3, 0x67, 0xb0, 0x3a, 0x8b, 0xba,
	0x47, 0x07, 0x43, 0x1f, 0xeb, 0x71, 0xa9, 0x7e, 0x1e, 0xee, 0x53, 0xe9, 0xa9, 0x91, 0xd1, 0x34,
	0xb2, 0xb2, 0x88, 0x32, 0x58, 0x9e, 0xdb, 0x07, 0x6a, 0x03, 0x30, 0xee, 0x44, 0x5c, 0xed, 0xde,
	0xf8, 0x8c, 0xd1, 0x65, 0x51, 0xc6, 0x49, 0x90, 0x3b, 0x90, 0xc3, 0x81, 0x17, 0x27, 0xe0, 0xe2,
	0x10, 0x59, 0x1c, 0xa8, 0xc1, 0xe7, 0x21, 0xe4, 0x3c, 0xc2, 0xd4, 0xcb, 0x26, 0xab, 0xab, 0xd5,
	0x10, 0x4e, 0xff, 0x79, 0x5f, 0xfd, 0xd9, 0x05, 0x68, 0xd9, 0xc0, 0xae, 0x35, 0x8e, 0xaf, 0xbf,
	0x80, 0xd2, 0xa9, 0xa4, 0x88, 0x22, 0xd5, 0x89, 0x34, 0x64, 0x1d, 0x69, 0x69, 0x66, 0xe1, 0xe4,
	0xf7, 0x5c, 0xf8, 0x28, 0x0d, 0x99, 0x6d, 0x27, 0x72, 0x7c, 0x26, 0x5e, 0x79, 0xdf, 0x19, 0x8d,
	0xdf, 0xf8, 0x78, 0x44, 0x31, 0x64, 0x7f, 0x96, 0x7c, 0x67, 0xa4, 0x2f, 0xba, 0x8e, 0x1e, 0x56,
	0x6e, 0xc0, 0xaa, 0x4f, 0x02, 0x5b, 0xcf, 0xaf, 0xb6, 0x3f, 0x1c, 0x70, 0x12, 0x0e, 0x54, 0x32,
	0x53, 0x16, 0xf2, 0x49, 0xb0, 0xa1, 0x4c, 0x8f, 0xb5, 0x45, 0x5c, 0x4a, 0x53, 0x11, 0xdf, 0x62,
	0x9a, 0x86, 0xc9, 0xaa, 0xe8, 0xe9, 0xec, 0xf0, 0xc7, 0x9d, 0x91, 0x6a, 0xf6, 0xcf, 0xce, 0xd6,
	0xd4, 0x7c, 0xd7, 0x71, 0x46, 0xe8, 0x09, 0x14, 0xd9, 0xc0, 0x61, 0x7d, 0x7b, 0x37, 0x72, 0xdc,
	0xc9, 0xcf, 0x94, 0x2f, 0x80, 0x15, 0x28, 0x9b, 0x1a, 0x04, 0x3d, 0x85, 0x55, 0x97, 0xfa, 0xe1,
	0xc0, 0x21, 0x01, 0xb7, 0x23, 0xcc, 0x23, 0xca, 0x42, 0xec, 0xaa, 0xfb, 0x51, 0x64, 0x69, 0xbe,
	0x36, 0x37, 0xf4, 0x2f, 0x3b, 0x55, 0x9a, 0xaf, 0x45, 0x69, 0x5e, 0x1a, 0x03, 0x58, 0xe3, 0x78,
	0xf4, 0x07, 0x58, 0x73, 0xa2, 0x2e, 0xe1, 0xfa, 0xd6, 0x15, 0xb4, 0xda, 0x03, 0xe2, 0x13, 0xf5,
	0xec, 0x5e, 0x10, 0x79, 0x75, 0x0a, 0x42, 0xf0, 0xff, 0x48, 0x00, 0xa0, 0x3a, 0x14, 0xf8, 0xc8,
	0x66, 0xe4, 0x65, 0x8c, 0x98, 0x93, 0x75, 0x9a, 0xe7, 0xa3, 0x1d, 0xf2, 0x52, 0xfb, 0x5c, 0x05,
	0x10, 0xc4, 0xda, 0x1e, 0x0e, 0xa8, 0xaf, 0x5f, 0xe4, 0x45, 0xa1, 0xd9, 0x10, 0x0a, 0x74, 0x07,
	0xae, 0x44, 0x98, 0xf1, 0x88, 0xb8, 0x62, 0x50, 0x9d, 0xe6, 0x4b, 0x05, 0x80, 0x9c, 0x82, 0x2f,
	0x4f, 0x7c, 0x76, 0xc6, 0x5c, 0x48, 0x80, 0xdb, 0xb9, 0xd7, 0x6f, 0xaa, 0x89, 0xff, 0xbf, 0xa9,
	0x1a, 0xd7, 0xf6, 0xc0, 0x3c, 0x6b, 0x6c, 0x13, 0x63, 0x6e, 0xeb, 0x6e, 0xa7, 0x7d, 0xdf, 0xb6,
	0x9e, 0x6c, 0x6d, 0x3d, 0xd8, 0xfa, 0xed, 0x4a, 0xa2, 0xbc, 0x72, 0x70, 0x58, 0x5b, 0x92, 0x4a,
	0xad, 0x43, 0x3f, 0x87, 0x65, 0xe5, 0xd4, 0xfe, 0xdd, 0xe3, 0xed, 0x47, 0xf7, 0x3a, 0xf7, 0x36,
	0x56, 0x8c, 0x32, 0x3a, 0x38, 0xac, 0x15, 0xa5, 0x7a, 0xac, 0x2d, 0x2f, 0xfd, 0xf9, 0xaf, 0x95,
	0xc4, 0xdf, 0xde, 0x56, 0x12, 0xff, 0x78, 0x5b, 0x31, 0xae, 0x31, 0xb8, 0xf4, 0x91, 0x41, 0x4f,
	0x4c, 0xf9, 0x93, 0xc5, 0xf2, 0x07, 0x87, 0xb5, 0x58, 0x14, 0x7d, 0xbd, 0x7d, 0xf7, 0xc9, 0x8e,
	0x84, 0x87, 0x83, 0xc3, 0x9a, 0x96, 0xc4, 0xaf, 0x9f, 0xc9, 0xca, 0xc9, 0x72, 0xe1, 0xe0, 0xb0,
	0xb6, 0x78, 0xc6, 0xa2, 0xad, 0xcd, 0xa3, 0xff, 0x55, 0x12, 0x47, 0xc7, 0x15, 0xe3, 0xdd, 0x71,
	0xc5, 0xf8, 0xef, 0x71, 0xc5, 0x78, 0x75, 0x52, 0x49, 0xbc, 0x3b, 0xa9, 0x24, 0xfe, 0x7d, 0x52,
	0x49, 0x3c, 0x9b, 0x6e, 0x18, 0x71, 0xf9, 0x06, 0x98, 0x37, 0xe7, 0xff, 0xff, 0x20, 0x0b, 0xb1,
	0x9b, 0x91, 0xac, 0xff, 0xfa, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0x5f, 0x17, 0xad, 0x9f,
	0x10, 0x00, 0x00,
}

func (x RequestContextBatchState) String() string {
	s, ok := RequestContextBatchState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RequestContextState) String() string {
	s, ok := RequestContextState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxRequestTimeout != that1.MaxRequestTimeout {
		return false
	}
	if this.MinDepositMultiple != that1.MinDepositMultiple {
		return false
	}
	if len(this.MinDeposit) != len(that1.MinDeposit) {
		return false
	}
	for i := range this.MinDeposit {
		if !this.MinDeposit[i].Equal(&that1.MinDeposit[i]) {
			return false
		}
	}
	if !this.ServiceFeeTax.Equal(that1.ServiceFeeTax) {
		return false
	}
	if !this.SlashFraction.Equal(that1.SlashFraction) {
		return false
	}
	if this.ComplaintRetrospect != that1.ComplaintRetrospect {
		return false
	}
	if this.ArbitrationTimeLimit != that1.ArbitrationTimeLimit {
		return false
	}
	if this.TxSizeLimit != that1.TxSizeLimit {
		return false
	}
	if this.BaseDenom != that1.BaseDenom {
		return false
	}
	if this.RestrictedServiceFeeDenom != that1.RestrictedServiceFeeDenom {
		return false
	}
	return true
}
func (m *ServiceDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		i -= len(m.Schemas)
		copy(dAtA[i:], m.Schemas)
		i = encodeVarintService(dAtA, i, uint64(len(m.Schemas)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AuthorDescription) > 0 {
		i -= len(m.AuthorDescription)
		copy(dAtA[i:], m.AuthorDescription)
		i = encodeVarintService(dAtA, i, uint64(len(m.AuthorDescription)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintService(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceBinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceBinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintService(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x4a
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.DisabledTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DisabledTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintService(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	if m.Available {
		i--
		if m.Available {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Options) > 0 {
		i -= len(m.Options)
		copy(dAtA[i:], m.Options)
		i = encodeVarintService(dAtA, i, uint64(len(m.Options)))
		i--
		dAtA[i] = 0x32
	}
	if m.QoS != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.QoS))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Pricing) > 0 {
		i -= len(m.Pricing)
		copy(dAtA[i:], m.Pricing)
		i = encodeVarintService(dAtA, i, uint64(len(m.Pricing)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintService(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.BatchState != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BatchState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ResponseThreshold != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ResponseThreshold))
		i--
		dAtA[i] = 0x78
	}
	if m.BatchResponseThreshold != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BatchResponseThreshold))
		i--
		dAtA[i] = 0x70
	}
	if m.BatchResponseCount != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BatchResponseCount))
		i--
		dAtA[i] = 0x68
	}
	if m.BatchRequestCount != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BatchRequestCount))
		i--
		dAtA[i] = 0x60
	}
	if m.BatchCounter != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BatchCounter))
		i--
		dAtA[i] = 0x58
	}
	if m.RepeatedTotal != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.RepeatedTotal))
		i--
		dAtA[i] = 0x50
	}
	if m.RepeatedFrequency != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.RepeatedFrequency))
		i--
		dAtA[i] = 0x48
	}
	if m.Repeated {
		i--
		if m.Repeated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Timeout != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ServiceFeeCap) > 0 {
		for iNdEx := len(m.ServiceFeeCap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceFeeCap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintService(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintService(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestContextBatchCounter != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.RequestContextBatchCounter))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RequestContextId) > 0 {
		i -= len(m.RequestContextId)
		copy(dAtA[i:], m.RequestContextId)
		i = encodeVarintService(dAtA, i, uint64(len(m.RequestContextId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ExpirationHeight != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ExpirationHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.RequestHeight != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.RequestHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ServiceFee) > 0 {
		for iNdEx := len(m.ServiceFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintService(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintService(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintService(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompactRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationHeight != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ExpirationHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.RequestHeight != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.RequestHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ServiceFee) > 0 {
		for iNdEx := len(m.ServiceFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintService(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestContextBatchCounter != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.RequestContextBatchCounter))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestContextId) > 0 {
		i -= len(m.RequestContextId)
		copy(dAtA[i:], m.RequestContextId)
		i = encodeVarintService(dAtA, i, uint64(len(m.RequestContextId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestContextBatchCounter != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.RequestContextBatchCounter))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RequestContextId) > 0 {
		i -= len(m.RequestContextId)
		copy(dAtA[i:], m.RequestContextId)
		i = encodeVarintService(dAtA, i, uint64(len(m.RequestContextId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintService(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintService(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintService(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintService(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pricing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pricing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pricing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PromotionsByVolume) > 0 {
		for iNdEx := len(m.PromotionsByVolume) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PromotionsByVolume[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PromotionsByTime) > 0 {
		for iNdEx := len(m.PromotionsByTime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PromotionsByTime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *PromotionByTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionByTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionByTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Discount.Size()
		i -= size
		if _, err := m.Discount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintService(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintService(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintService(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PromotionByVolume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionByVolume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionByVolume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Discount.Size()
		i -= size
		if _, err := m.Discount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintService(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Volume != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Volume))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RestrictedServiceFeeDenom {
		i--
		if m.RestrictedServiceFeeDenom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintService(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TxSizeLimit != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.TxSizeLimit))
		i--
		dAtA[i] = 0x40
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.ArbitrationTimeLimit, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ArbitrationTimeLimit):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintService(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x3a
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.ComplaintRetrospect, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ComplaintRetrospect):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintService(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	{
		size := m.SlashFraction.Size()
		i -= size
		if _, err := m.SlashFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintService(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ServiceFeeTax.Size()
		i -= size
		if _, err := m.ServiceFeeTax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintService(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.MinDeposit) > 0 {
		for iNdEx := len(m.MinDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MinDepositMultiple != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.MinDepositMultiple))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxRequestTimeout != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.MaxRequestTimeout))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.AuthorDescription)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Schemas)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ServiceBinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Pricing)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.QoS != 0 {
		n += 1 + sovService(uint64(m.QoS))
	}
	l = len(m.Options)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Available {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DisabledTime)
	n += 1 + l + sovService(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RequestContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.ServiceFeeCap) > 0 {
		for _, e := range m.ServiceFeeCap {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovService(uint64(m.Timeout))
	}
	if m.Repeated {
		n += 2
	}
	if m.RepeatedFrequency != 0 {
		n += 1 + sovService(uint64(m.RepeatedFrequency))
	}
	if m.RepeatedTotal != 0 {
		n += 1 + sovService(uint64(m.RepeatedTotal))
	}
	if m.BatchCounter != 0 {
		n += 1 + sovService(uint64(m.BatchCounter))
	}
	if m.BatchRequestCount != 0 {
		n += 1 + sovService(uint64(m.BatchRequestCount))
	}
	if m.BatchResponseCount != 0 {
		n += 1 + sovService(uint64(m.BatchResponseCount))
	}
	if m.BatchResponseThreshold != 0 {
		n += 1 + sovService(uint64(m.BatchResponseThreshold))
	}
	if m.ResponseThreshold != 0 {
		n += 1 + sovService(uint64(m.ResponseThreshold))
	}
	if m.BatchState != 0 {
		n += 2 + sovService(uint64(m.BatchState))
	}
	if m.State != 0 {
		n += 2 + sovService(uint64(m.State))
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.ServiceFee) > 0 {
		for _, e := range m.ServiceFee {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.RequestHeight != 0 {
		n += 1 + sovService(uint64(m.RequestHeight))
	}
	if m.ExpirationHeight != 0 {
		n += 1 + sovService(uint64(m.ExpirationHeight))
	}
	l = len(m.RequestContextId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.RequestContextBatchCounter != 0 {
		n += 1 + sovService(uint64(m.RequestContextBatchCounter))
	}
	return n
}

func (m *CompactRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestContextId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.RequestContextBatchCounter != 0 {
		n += 1 + sovService(uint64(m.RequestContextBatchCounter))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.ServiceFee) > 0 {
		for _, e := range m.ServiceFee {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.RequestHeight != 0 {
		n += 1 + sovService(uint64(m.RequestHeight))
	}
	if m.ExpirationHeight != 0 {
		n += 1 + sovService(uint64(m.ExpirationHeight))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.RequestContextId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.RequestContextBatchCounter != 0 {
		n += 1 + sovService(uint64(m.RequestContextBatchCounter))
	}
	return n
}

func (m *Pricing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PromotionsByTime) > 0 {
		for _, e := range m.PromotionsByTime {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.PromotionsByVolume) > 0 {
		for _, e := range m.PromotionsByVolume {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *PromotionByTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovService(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovService(uint64(l))
	l = m.Discount.Size()
	n += 1 + l + sovService(uint64(l))
	return n
}

func (m *PromotionByVolume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Volume != 0 {
		n += 1 + sovService(uint64(m.Volume))
	}
	l = m.Discount.Size()
	n += 1 + l + sovService(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxRequestTimeout != 0 {
		n += 1 + sovService(uint64(m.MaxRequestTimeout))
	}
	if m.MinDepositMultiple != 0 {
		n += 1 + sovService(uint64(m.MinDepositMultiple))
	}
	if len(m.MinDeposit) > 0 {
		for _, e := range m.MinDeposit {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = m.ServiceFeeTax.Size()
	n += 1 + l + sovService(uint64(l))
	l = m.SlashFraction.Size()
	n += 1 + l + sovService(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ComplaintRetrospect)
	n += 1 + l + sovService(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ArbitrationTimeLimit)
	n += 1 + l + sovService(uint64(l))
	if m.TxSizeLimit != 0 {
		n += 1 + sovService(uint64(m.TxSizeLimit))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.RestrictedServiceFeeDenom {
		n += 2
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServiceDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pricing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QoS", wireType)
			}
			m.QoS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QoS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.DisabledTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeeCap = append(m.ServiceFeeCap, types.Coin{})
			if err := m.ServiceFeeCap[len(m.ServiceFeeCap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Repeated = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedFrequency", wireType)
			}
			m.RepeatedFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatedFrequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedTotal", wireType)
			}
			m.RepeatedTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatedTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCounter", wireType)
			}
			m.BatchCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchRequestCount", wireType)
			}
			m.BatchRequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchRequestCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchResponseCount", wireType)
			}
			m.BatchResponseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchResponseCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchResponseThreshold", wireType)
			}
			m.BatchResponseThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchResponseThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseThreshold", wireType)
			}
			m.ResponseThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchState", wireType)
			}
			m.BatchState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchState |= RequestContextBatchState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= RequestContextState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFee = append(m.ServiceFee, types.Coin{})
			if err := m.ServiceFee[len(m.ServiceFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeight", wireType)
			}
			m.RequestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationHeight", wireType)
			}
			m.ExpirationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContextBatchCounter", wireType)
			}
			m.RequestContextBatchCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestContextBatchCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContextBatchCounter", wireType)
			}
			m.RequestContextBatchCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestContextBatchCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFee = append(m.ServiceFee, types.Coin{})
			if err := m.ServiceFee[len(m.ServiceFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeight", wireType)
			}
			m.RequestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationHeight", wireType)
			}
			m.ExpirationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContextBatchCounter", wireType)
			}
			m.RequestContextBatchCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestContextBatchCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pricing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pricing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pricing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionsByTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromotionsByTime = append(m.PromotionsByTime, PromotionByTime{})
			if err := m.PromotionsByTime[len(m.PromotionsByTime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionsByVolume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromotionsByVolume = append(m.PromotionsByVolume, PromotionByVolume{})
			if err := m.PromotionsByVolume[len(m.PromotionsByVolume)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionByTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionByTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionByTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Discount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionByVolume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionByVolume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionByVolume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Discount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestTimeout", wireType)
			}
			m.MaxRequestTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositMultiple", wireType)
			}
			m.MinDepositMultiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDepositMultiple |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDeposit = append(m.MinDeposit, types.Coin{})
			if err := m.MinDeposit[len(m.MinDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeTax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServiceFeeTax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComplaintRetrospect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.ComplaintRetrospect, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArbitrationTimeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.ArbitrationTimeLimit, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSizeLimit", wireType)
			}
			m.TxSizeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSizeLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictedServiceFeeDenom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictedServiceFeeDenom = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
